#SingleInstance Force
#Warn
#NoEnv
#MaxMem 1024
#KeyHistory 0
SetBatchLines, -1
ListLines, Off
;AdminCheck()

FileSelectFile, path, 3
FileRead, jtxt, % path ;% "D:\Scripts\JSON_Test_File.json"
t1 := 0 - A_TickCount
validate(jtxt)
t1 += A_TickCount
MsgBox, % "Time to validate: " t1 " ms"
ExitApp

make_valid_key() {
	; Uses char codes to assign validation table columns
	; This bypasses AHK's "case-insensitive object key" issue
    ;       Spc     Tab     LF      CR
    table_key := {32:1   ,9:2    ,10:2   ,13:2
           ;{       }       [       ]       ,       :
           ,123:3  ,125:4  ,91:5   ,93:6   ,44:7   ,58:8
           ;"       \       /       +       -       .    
           ,34:9   ,92:10  ,47:11  ,43:12  ,45:13  ,46:14
           ;0       1       2       3       4    
           ,48:15  ,49:16  ,50:16  ,51:16  ,52:16
           ;5       6       7       8       9    
           ,53:16  ,54:16  ,55:16  ,56:16  ,57:16
           ;A       B       C       D       E       F      
           ,65:17  ,66:17  ,67:17  ,68:17  ,69:21  ,70:17 
           ;a       b       c       e       e       f     
           ,97:18  ,98:19  ,99:20  ,100:20 ,101:20 ,102:22
           ;l       n       r       s       t       u
           ,108:23 ,110:24 ,114:25 ,115:26 ,116:27 ,117:28 }
	
	Loop, 32
		(table_key[A_Index-1] > 0) ? "" ; Other than tab, CR and LF, none of the first 32
		: table_key[A_Index-1] := 30    ; ASCII control characters can be in a JSON file
	
	return table_key
}

make_valid_table() {
	; Validation table for a JSON file
	table    := {}
	;            1    2    3    4    5    6    7    8    9    10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30    
	;            spc  ws   {    }    [    ]    ,    :    "    \    /    +    -    .    0    1-9 ABCDF a    b    e    E    f    l    n    r    s    t    u    ALL  NA    
	table.BG := ["BG","BG",-10 ,""  ,-10 ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""   ] ; Beginning
	table.ON := ["ON","ON",""  ,-4  ,""  ,""  ,""  ,""  ,-3  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""   ] ; Object New
	table.OK := ["OK","OK",""  ,""  ,""  ,""  ,""  ,""  ,-3  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""   ] ; Object Key
	table.OC := ["OC","OC",""  ,""  ,""  ,""  ,""  ,"VL",""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""   ] ; Object Colon
	table.AN := ["AN","AN",-1  ,""  ,-2  ,-8  ,""  ,""  ,-7  ,""  ,""  ,""  ,-7  ,""  ,-7  ,-7  ,""  ,""  ,""  ,""  ,""  ,-7  ,""  ,-7  ,""  ,""  ,-7  ,""  ,""  ,""   ] ; Array New
	table.VL := ["VL","VL",-1  ,""  ,-2  ,""  ,""  ,""  ,-7  ,""  ,""  ,""  ,-7  ,""  ,-7  ,-7  ,""  ,""  ,""  ,""  ,""  ,-7  ,""  ,-7  ,""  ,""  ,-7  ,""  ,""  ,""   ] ; Value
	table.CC := ["CC","CC",""  ,-8  ,""  ,-8  ,-5  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""   ] ; Comma Close
	;            1    2    3    4    5    6    7    8    9    10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30    
	;            spc  ws   {    }    [    ]    ,    :    "    \    /    +    -    .    0    1-9 ABCDF a    b    e    E    f    l    n    r    s    t    u    ALL  NA    
	table.ST := ["ST",""  ,"ST","ST","ST","ST","ST","ST",-6  ,"ES","ST","ST","ST","ST","ST","ST","ST","ST","ST","ST","ST","ST","ST","ST","ST","ST","ST","ST","ST",""   ] ; String
	table.ES := [""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,"ST","ST","ST",""  ,""  ,""  ,""  ,""  ,""  ,""  ,"ST",""  ,""  ,"ST",""  ,"ST","ST",""  ,"ST","U1",""  ,""   ] ; String Escape
	table.U1 := [""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,"U2","U2","U2","U2","U2","U2","U2","U2",""  ,""  ,""  ,""  ,""  ,""  ,""  ,""   ] ; Unicode Char 1
	table.U2 := [""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,"U3","U3","U3","U3","U3","U3","U3","U3",""  ,""  ,""  ,""  ,""  ,""  ,""  ,""   ] ; Unicode Char 2
	table.U3 := [""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,"U4","U4","U4","U4","U4","U4","U4","U4",""  ,""  ,""  ,""  ,""  ,""  ,""  ,""   ] ; Unicode Char 3
	table.U4 := [""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,"ST","ST","ST","ST","ST","ST","ST","ST",""  ,""  ,""  ,""  ,""  ,""  ,""  ,""   ] ; Unicode Char 4
	;            1    2    3    4    5    6    7    8    9    10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30    
	;            spc  ws   {    }    [    ]    ,    :    "    \    /    +    -    .    0    1-9 ABCDF a    b    e    E    f    l    n    r    s    t    u    ALL  NA    
	table.NN := [""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,"ND","NI",""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""   ] ; Number > Negative
	table.NI := [-6  ,-6  ,""  ,-9  ,""  ,-9  ,-9  ,""  ,""  ,""  ,""  ,""  ,""  ,"D1","NI","NI",""  ,""  ,""  ,"NE","NE",""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""   ] ; Number > Integer
	table.ND := [-6  ,-6  ,""  ,-9  ,""  ,-9  ,-9  ,""  ,""  ,""  ,""  ,""  ,""  ,"D1",""  ,""  ,""  ,""  ,""  ,"NE","NE",""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""   ] ; Number > Decimal
	table.D1 := [""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,"D2","D2",""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""   ] ; Decimal 1
	table.D2 := [-6  ,-6  ,""  ,-9  ,""  ,-9  ,-9  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,"D2","D2",""  ,""  ,""  ,"NE","NE",""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""   ] ; Decimal 2
	table.NE := [""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,"E1","E1",""  ,"E2","E2",""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""   ] ; Number > Exponent
	table.E1 := [""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,"E2","E2",""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""   ] ; Exponent 1
	table.E2 := [-6  ,-6  ,""  ,-9  ,""  ,-9  ,-9  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,"E2","E2",""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""   ] ; Exponent 2
	;            1    2    3    4    5    6    7    8    9    10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30    
	;            spc  ws   {    }    [    ]    ,    :    "    \    /    +    -    .    0    1-9 ABCDF a    b    e    E    f    l    n    r    s    t    u    ALL  NA    
	table.T1 := [""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,"T2",""  ,""  ,""  ,""  ,""   ] ; true > r
	table.T2 := [""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,"T3",""  ,""   ] ; true > u
	table.T3 := [""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,-6  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""   ] ; true > e
	table.F1 := [""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,"F2",""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""   ] ; false > a
	table.F2 := [""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,"F3",""  ,""  ,""  ,""  ,""  ,""  ,""   ] ; false > l
	table.F3 := [""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,"F4",""  ,""  ,""  ,""   ] ; false > s
	table.F4 := [""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,-6  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""   ] ; false > e
	table.N1 := [""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,"N2",""  ,""   ] ; null > u
	table.N2 := [""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,"N3",""  ,""  ,""  ,""  ,""  ,""  ,""   ] ; null > l
	table.N3 := [""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,""  ,-6  ,""  ,""  ,""  ,""  ,""  ,""  ,""   ] ; null > l
	
	Return table
}
	
err_finder(json, i, exp){
	Local
	
	max        := StrLen(json)            ; Max amount of characters
	,st        := "VL"
	,err_i     := 0                       ; Index of error
	,path_a    := []                      ; Path array type
	,get_key   := 0                       ; Tracks if getting key
	;,v_table   := this.make_valid_table() ; JSON validation table
	,v_table   := make_valid_table()      ; JSON validation table
	;,table_key := this.make_valid_key()   ; Key that converts ascii to validation table columns
	,table_key := make_valid_key()        ; Key that converts ascii to validation table columns
	,is_val    := { 9: "ST"               ; Used to assign correct state when value recording starts
                  ,13: "NN"
                  ,15: "ND"
                  ,16: "NI"
                  ,22: "F1"
                  ,24: "N1"
                  ,27: "T1"}
	
	; JSON check
	If (max > 2){
		MsgBox,, Validation Error, % "Invalid JSON file provided to validate(json, index, expected) function."
			. "`nJSON is less than 2 characters."
		Return ""
	}
	; Index check
	If (i < 0 || i > max){
		MsgBox,, Validation Error, % "Invalid index provided to validate(json, index, expected) function."
			. "`ni: " i "`nmax: " max
		Return ""
	}
	; Expected check
	no_exp := True
	For k, v in v_table
		(exp = k ? no_exp := False : "")
	If (no_exp){
		MsgBox,, Validation Error, % "Invalid index provided to validate(json, index, expected) function."
			. "`ni: " i "`nmax: " max
		Return ""
	}
	
	While (i < max)
		k := table_key[Asc(SubStr(json,++i,1))]
		,st := v_table[(ls := st)][(k = "" ? (k := 29) : k)]    ; 
		,(st > 0) ? ""                                          ; 0 Skips all checks bc action states are all below 0
		: (st = -1) ? (st := "ON")                              ; -1 New Object - Create obj
		: (st = -2) ? (st := "AN", path_a.Push(1) )             ; -2 New Array - Create arr
		: (st = -3) ? (st := "ST", get_key := 1 )               ; -3 Object key - 
		: (st = -4) ? st := "CC"                                ; -4 Empty object
		: (st = -5) ? path_a[path_a.MaxIndex()]                 ; -5 Another value expected
			? (st := "VL")                                      ;    Increment index if array
			: (st := "OK", path_a.Pop())                        ;    Get new key if object
		: (st = -6) ? get_key                                   ; -6 Record value/key
			? (st := "OC", path_a.Push(0), get_key := 0 )       ;    Reset get_key
			: (st := "CC" )                                     ;    If string, add to object
		: (st = -7) ? (st := is_val[k])                         ; -7 Mark start of value and resume validation
		: (st = -8) ? (k = 4 && !path_a[path_a.MaxIndex()])     ; -8 End obj/arr If bracket and in array
			|| (k = 6 && path_a[path_a.MaxIndex()])             ; OR if brace and in objecct
			? (st := "CC", path_a.Pop())                        ;    Remove old path and check CC
			: (err_i := i, i := max)                            ; If brace doesn't match, error out
		: (st = -9) ? (st := "CC", --i)                         ; -9 Record value
		: (st = -10) ? (k = 3)                                  ; -10 JSON starting array/object
			? (st := "ON", get_key := 1)
			: (st := "AN", path_a.Push(1))
		: (st == "") ? (err_i := i, i := max)                            ; Blank state indicates an error
		: msg("Invalid State Error")
	
	; ls and k now have everything we need to know about the error
	If (err_i > 0)
		msg("There was an error."
			. "`nstate: " ls
			. "`nkey: " k
			. "`nindex: " err_i
			. "`nchar: " (c:=SubStr(json, err_i, 1)) "`nChar Asc: " Asc(c)
			. "`n" SubStr(json, err_i-11, 10) ">>>" SubStr(json, err_i, 1) "<<<" SubStr(json, err_i+1, 10))
	
	Return (err_i = 0 ? 1 : 0)
}


validate(json){
	Local
	
	max        := StrLen(json)            ; Max amount of characters
	,i         := 0                       ; Current char index
	,err_i     := 0                       ; Index of error
	,st        := "BG"                    ; State of validation
	,path      := []                      ; Value path
	,path_a    := []                      ; Path array type
	,get_key   := 0                       ; Tracks if getting key
    ,obj       := {}                      ; Object to build
	;,v_table   := this.make_valid_table() ; JSON validation table
	,v_table   := make_valid_table()      ; JSON validation table
	;,table_key := this.make_valid_key()   ; Key that converts ascii to validation table columns
	,table_key := make_valid_key()        ; Key that converts ascii to validation table columns
    ,is_val    := { 9: "ST" ; Used to assign correct state when value recording starts
                  ,13: "NN"
                  ,15: "ND"
                  ,16: "NI"
                  ,22: "F1"
                  ,24: "N1"
                  ,27: "T1"}
	
	; JSON check
	If (max < 2){
		MsgBox,, Validation Error, % "Invalid JSON file provided to validate(json, index, expected) function."
			. "`nJSON is less than 2 characters."
		Return ""
	}
	
	While (i < max)
		k := table_key[Asc(SubStr(json,++i,1))]
		,st := v_table[(ls := st)][(k = "" ? (k := 29) : k)]   
		,(st > 0) ? ""                                       ; 0 Skips all checks bc action states are all below 0
		: (st = -1) ? (st := "ON")                           ; -1 New Object - Create obj
		: (st = -2) ? (st := "AN", path_a.Push(1) )          ; -2 New Array - Create arr
		: (st = -3) ? (st := "ST", get_key := 1 )            ; -3 Object key - 
		: (st = -4) ? st := "CC"                             ; -4 Empty object
		: (st = -5) ? path_a[path_a.MaxIndex()]              ; -5 Another value expected
			? (st := "VL")                                   ;    Increment index if array
			: (st := "OK", path_a.Pop())                     ;    Get new key if object
		: (st = -6) ? get_key                                ; -6 Record value/key
			? (st := "OC", path_a.Push(0), get_key := 0 )    ;    Reset get_key
			: (st := "CC" )                                  ;    If string, add to object
		: (st = -7) ? (st := is_val[k])                      ; -7 Mark start of value and resume validation
		: (st = -8) ? (k = 4 && !path_a[path_a.MaxIndex()])  ; -8 End obj/arr If bracket and in array
			|| (k = 6 && path_a[path_a.MaxIndex()])          ; OR if brace and in objecct
			? (st := "CC", path_a.Pop())                     ;    Remove old path and check CC
			: (err_i := i, i := max)                         ; If brace doesn't match, error out
		: (st = -9) ? (st := "CC", --i)                      ; -9 Record value
		: (st = -10) ? (k = 3)                               ; -10 JSON starting array/object
			? (st := "ON", get_key := 1)                     ;    If object, get key
			: (st := "AN", path_a.Push(1))                   ;    If array, get value and set path type
		: (st == "") ? (err_i := i, i := max)                ; Blank state indicates an error
		: msg("Invalid State Error")
	
	; ls and k now have everything we need to know about the error
	If (err_i > 0)
		msg("There was an error."
			. "`nstate: " ls
			. "`nkey: " k
			. "`nindex: " err_i
			. "`nchar: " (c:=SubStr(json, err_i, 1)) "`nChar Asc: " Asc(c)
			. "`n" SubStr(json, err_i-11, 10) ">>>" SubStr(json, err_i, 1) "<<<" SubStr(json, err_i+1, 10))
	
	Return (err_i = 0 ? 1 : 0)
}


obj_builder(json){
	Local
	
	If (json == ""){
		MsgBox,, Validation Error, % "Invalid JSON file provided to validate(json, index) function. JSON is empty."
		Return ""
	}
	
	max        := StrLen(json)            ; Max amount of characters
	,i         := 0                       ; Current char index
	,err_i     := 0                       ; Index of error
	,st        := "BG"                    ; State of validation
	,path      := []                      ; Value path
	,path_a    := []                      ; Path array type
	,get_key   := 0                       ; Tracks if getting key
    ,obj       := {}                      ; Object to build
	;,v_table   := this.make_valid_table() ; JSON validation table
	,v_table   := make_valid_table()      ; JSON validation table
	;,table_key := this.make_valid_key()   ; Key that converts ascii to validation table columns
	,table_key := make_valid_key()        ; Key that converts ascii to validation table columns
    ,is_val    := { 9: "ST" ; Used to assign correct state when value recording starts
                  ,13: "NN"
                  ,15: "ND"
                  ,16: "NI"
                  ,22: "F1"
                  ,24: "N1"
                  ,27: "T1"}
	While (i < max)
		k := table_key[Asc(SubStr(json,++i,1))]
		,st := v_table[(ls := st)][(k = "" ? (k := 29) : k)]             ; 
		,(st > 0) ? ""                                                   ; 0 Skips all checks bc action states are all below 0
		: (st = -1) ? (st := "ON", obj[path*] := {} )                    ; -1 New Object - Create obj
		: (st = -2) ? (st := "AN", obj[path*] := []                      ; -2 New Array - Create arr
			, path.Push(1), path_a.Push(1) )                             ;    And set new path index
		: (st = -3) ? (st := "ST", get_key := i )                        ; -3 Object key - 
		: (st = -4) ? st := "CC"                                         ; -4 Empty object
		: (st = -5) ? path_a[path_a.MaxIndex()]                          ; -5 Another value expected
			? (st := "VL", path[path.MaxIndex()]++)                      ;    Increment index if array
			: (st := "OK", path.Pop(), path_a.Pop())                     ;    Get new key if object
		: (st = -6) ? get_key                                            ; -6 Record value/key
			? (path.Push(SubStr(json,get_key,i-get_key+1))               ;    If key, add to path and get colon
				, st := "OC", path_a.Push(0), get_key := 0 )             ;    Reset get_key
			: (st := "CC", obj[path*] := SubStr(json,start,i-start+1) )  ;    If string, add to object
		: (st = -7) ? (st := is_val[k], start := i)                      ; -7 Mark start of value and resume validation
		: (st = -8) ? (k = 4 && !path_a[path_a.MaxIndex()])              ; -8 End obj/arr If bracket and in array
			|| (k = 6 && path_a[path_a.MaxIndex()])                      ; OR if brace and in objecct
			? (st := "CC", path.Pop(), path_a.Pop())                     ;    Remove old path and check CC
			: (err_i := i, i := max)                                     ; If brace doesn't match, error out
		: (st = -9) ? (st := "CC", --i                                   ; -9 Record value
			, obj[path*] := SubStr(json, start, i-start+1) )             ;    and backtrack for comma close
		: (st = -10) ? (k = 3)                                           ; -10 JSON starting array/object
			? (st := "ON", get_key := 1)
			: (st := "AN", path.Push(1), path_a.Push(1))
		: (st == "") ? (err_i := i, i := max)                            ; Blank state indicates an error
		: msg("Invalid State Error")
	
	; ls and k now have everything we need to know about the error
	If (err_i > 0)
		msg("There was an error."
			. "`nstate: " ls
			. "`nkey: " k
			. "`nindex: " err_i
			. "`nchar: " (c:=SubStr(json, err_i, 1)) "`nChar Asc: " Asc(c)
			. "`n" SubStr(json, err_i-11, 10) ">>>" SubStr(json, err_i, 1) "<<<" SubStr(json, err_i+1, 10))
	
	Return obj
}




word_count(txt){
	Local
	arr := {}
	Loop, Parse, % txt, % " ,", % "`n`r`t"
		arr.HasKey(A_LoopField)
			? arr[A_LoopField]++
			: arr[A_LoopField] := 1
	
	str := ""
	For key, value in arr
		str .= "Word: " key ": Count: " value "`n"
	
	Return RTrim(str, "`n")
}

AdminCheck(){
	If !(A_IsAdmin) || !RegExMatch(DllCall("GetCommandLine", "str"), " /restart(?!\S)") {
		try Run, % "*RunAs " (A_IsCompiled? """" A_ScriptFullPath """ /restart"
			: """" A_AhkPath """ /restart """ A_ScriptFullPath """")
		ExitApp
	}
	Return A_IsAdmin
}

*Esc::ExitApp

QPX(N=0) { ; Wrapper for QueryPerformanceCounter()by SKAN | CD: 06/Dec/2009
	Static F:="",A:="",Q:="",P:="",X:="" ; www.autohotkey.com/forum/viewtopic.php?t=52083 | LM: 10/Dec/2009
	If	( N && !P )
		Return	DllCall("QueryPerformanceFrequency",Int64P,F) + (X:=A:=0) + DllCall("QueryPerformanceCounter",Int64P,P)
	DllCall("QueryPerformanceCounter",Int64P,Q), A+=Q-P, P:=Q, X++
	Return	( N && X=N ) ? (X--)<<64 : ( N=0 && (R:=A/X/F) ) ? ( R + (A:=P:=X:=0) ) : 1
}

msg(txt) {
	MsgBox, % txt
	Return
}





















/*
; Switch Statement vs Ternary vs If-Else
; Ternary is ~29% faster than Switch
; Ternary is ~21% faster than If-Else
; If-Else is ~8% faster than Switch

i := 10000000
qpx(1)
arr1 := [0,0,0,0]
Loop, % i
{
	Random, num, 1, 10
	Switch num
	{
	Case 1:
		arr1[1]++
	Case 2:
		arr1[2]++
	Case 3:
		arr1[3]++
	Default:
		arr1[4]++
	}
}
t1 := qpx(0)

qpx(1)
arr2 := [0,0,0,0]
Loop, % i
{
	Random, num, 1, 10
	(num == 1)
		? arr2[num]++
	: (num == 2)
		? arr2[num]++
	: (num == 3)
		? arr2[num]++
	: arr2[4]++
}
t2 := qpx(0)

qpx(1)
arr3 := [0,0,0,0]
Loop, % i
{
	Random, num, 1, 10
	If (num == 1)
		arr2[num]++
	Else If (num == 2)
		arr2[num]++
	Else If (num == 3)
		arr2[num]++
	Else arr2[4]++
}
t3 := qpx(0)

MsgBox, % "Switch: " t1 " seconds"
	. "`nTern: " t2 " seconds"
	. "`nIf-Else: " t3 " seconds"

str := "arr1 results"
For k, v in arr1
	str .= "`n" k ":" v
str .= "`n`narr2 results"
For k, v in arr2
	str .= "`n" k ":" v

MsgBox, % str
